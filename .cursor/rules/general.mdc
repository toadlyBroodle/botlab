---
description: Core guidelines for all Smolagent projects covering structure, environment, dependencies, and code style
globs: **/*.py, **/README.md, **/example.py
alwaysApply: false
---
# General Guidelines for Smolagent Projects

## Project Structure
- Never modify the structure of the project without explicit permission
- Each agent project (researcher, writer_critic, manager, editor, qaqc) follows a class-based structure:
  - `__init__.py`: Exports the agent classes
  - `agents.py`: Contains agent classes with initialization and execution methods
  - `example.py`: Demonstrates how to use the agent classes directly
  - `tools.py`: Contains tools used by the agents
  - `data/`: Directory for storing agent outputs with human-readable date prefixes

## File Management
- Each agent has its own data directory (e.g., researcher/data/)
- Files are saved with human-readable date prefixes (YYYY-MM-DD_HH-MM)
- The FileManager handles saving and loading files from the correct locations
- Use `load_file(agent_type)` to load the latest file from an agent
- Use `save_final_answer(agent, result, query_or_prompt, agent_type)` to save outputs

## Virtual Environment
- A shared `.venv` virtual environment is created at the project root
- Python scripts should be run with the virtual environment activated
- Example 1: 
  ```bash
  source .venv/bin/activate
  python -m agents.researcher.example
  ```
- If poetry is installed, python scripts may also be run with:
- Example 2:
  ```bash
  poetry run python -m agents.ranked_agent_loop_example
  ```
- Working directory is always the project root

## Dependencies
- Use the existing dependencies in the root-level requirements.txt file
- Never install new dependencies without asking user first

## Code Style
- Follow PEP 8 guidelines for Python code
- Use type hints where appropriate
- Keep functions focused and reasonably sized
- Use class-based approach for all agents with consistent patterns:
  - Class-based implementation (e.g., ResearcherAgent, ManagerAgent)
  - `__init__` method that creates a model internally if one isn't provided
  - Methods for primary functionality (e.g., run_query, edit_content, compare_outputs)
  - Internal CodeAgent or ToolCallingAgent instance accessible via the `agent` property

## Main cli arguments
- Always add parse arguments at very bottom of files in the main guard and pass them into main()
- Always keep help parameters on same line as other parameters
Example:
if __name__ == "__main__":
    """Main function to parse arguments."""
    parser = argparse.ArgumentParser(description="...")
    parser.add_argument("--arg1", type=int, help="...")
    main(parser.parse_args())

## Documentation
- Write clear docstrings for functions and classes
  - @tool docstrings are automatically added to agent system_prompts
- Do not write new example or README files unless asked to

## General
- Before adding unsolicited features, ask user before proceeding
- Create agent instances directly using their class constructors
- Provide custom model instances to share models between agents
- Use the agent's primary methods to execute tasks
- Configure agents through constructor parameters