---
description: Structure and organization guidelines for specialized agent projects
globs: **/researcher/**, **/manager/**, **/editor/**, **/writer_critic/**, **/qaqc/**
alwaysApply: false
---
---
description: Structure and organization guidelines for specialized agent projects
globs: **/researcher/**, **/manager/**, **/editor/**, **/writer_critic/**, **/qaqc/**
alwaysApply: false
---

# Agent Projects Guidelines

## Common Structure
- Each agent project (researcher, manager, editor, writer_critic, qaqc) follows a class-based structure:
  - `__init__.py`: Exports the agent classes
  - `agents.py`: Contains agent classes with initialization and execution methods
  - `example.py`: Demonstrates how to use the agent classes directly
  - `tools.py`: Contains tools used by the agents

## Agent Class Structure
- All agent classes follow a consistent pattern:
  - Class-based implementation (e.g., ResearcherAgent, ManagerAgent)
  - `__init__` method that creates a model internally if one isn't provided
  - Methods for primary functionality (e.g., run_query, edit_content, compare_outputs)
  - Internal CodeAgent or ToolCallingAgent instance accessible via the `agent` property

## Project-Specific Guidelines

### Researcher Agent
- Located in *researcher/* directory
- `ResearcherAgent` class for web search and information gathering
- Uses DuckDuckGo for web search, arXiv for academic papers
- Supports PDF to markdown conversion
- Primary method: `run_query(query)`

### Manager Agent
- Located in *manager/* directory
- `ManagerAgent` class for coordinating multiple specialized agents
- Takes a list of agent instances to manage
- Supports customizing agent descriptions and prompts
- Primary method: `run_query(query)`

### Editor Agent
- Located in *editor/* directory
- `EditorAgent` class for editing content with fact checking
- `FactCheckerAgent` class for verifying claims
- EditorAgent creates its own FactCheckerAgent if one isn't provided
- Primary methods: `edit_content(content)` and `verify_claims(claims)`

### Writer-Critic Agent
- Located in *writer_critic/* directory
- `WriterAgent` class for drafting content
- `CriticAgent` class for providing feedback
- WriterAgent creates its own CriticAgent if one isn't provided
- Primary methods: `write_draft(prompt)` and `provide_feedback(draft)`

### QAQC Agent
- Located in *qaqc/* directory
- `QAQCAgent` class for comparing outputs and selecting the best one
- Primary method: `compare_outputs(outputs, query)`

### Utils
- Located in *utils/* directory
- Contains shared utilities for all agent projects
- *utils/code_agent.yaml* and *utils/toolcalling_agent.yaml* are static top-level agent system_prompts: never modify these!
- *utils/agents/tools.py* contains all agent shared tools
- *utils/gemini/* subdirectory contains Google Gemini LLM API utilities

## Usage Best Practices
- Create agent instances directly using their class constructors
- Provide custom model instances to share models between agents
- Use the agent's primary methods to execute tasks
- Configure agents through constructor parameters
- Define custom agent descriptions and prompts as constructor parameters
- Use example.py files as reference for how to use the agents